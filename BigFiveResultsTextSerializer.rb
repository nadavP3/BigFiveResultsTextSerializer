class BigFiveResultsTextSerializer
# Converts the textual results of a test into a hash.
# Test results are generated by [Redacted]

  public
  # From Text
  def initialize(text)
    text.gsub!(/\r\n?/, "\n")                                   # This line is not required on Microsoft Windows 10 machines:
                                                                # For whatever reason the "File.read" method works differently on Windows and doesn't add "\r".
                                                                # Presence of "\r" in the return value, on MacOS*, causes the regex to fail matching,
                                                                # This means that our code to only capture test subject's name (no test results or even titles).
                                                                # * Tested on MacOS High Sierra 10.13.3
                                                                #
    name_regex = /(?<=compares)(.*?)(?=from the)/               # Returns test taker's name.
    measurement_regex = /(?<=.\ Score\n\n)(.*?)(?=Your )/m      # Returns all test's titles and scores.
    subdomain_regex = /(^[A-Z][a-zA-Z\s\-]+)\.+([0-9]+)\n/      # Returns the all exam sets.

    @name = text.scan(name_regex)
    @name[0].join
    @initializationResults = []
    measurements = text.scan(measurement_regex).to_a           # Results blocks [txt....digits]

    measurements.each do |measurement|                         # Evaluating each exam.
      measure = measurement[0].to_s
      subdomains = measure.scan(subdomain_regex)               # Paticular exam set's content.
      domain = subdomains.shift                                # Exam's title and score.
      @initializationResults << [domain[1],domain[2],subdomains]
    end

    hash_it
  end

  private
  # To Hash
  def hash_it
  end

end


class BigFiveResultsPoster
# Submits a Big 5 test results to the [Redacted] website
  attr_reader :token, :response_code

  public
  def initialize(results_hash, email)
  end

  private
  def post
  end

end

text_read = File.read("full_results.txt")
flow_start = BigFiveResultsTextSerializer.new(text_read)
last_phase = BigFiveResultsPoster.new(flow_start, "user@example.com")
