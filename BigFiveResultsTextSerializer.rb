class BigFiveResultsTextSerializer
# Converts the textual results of a test into a hash.
# Test results are generated by [Redacted]

  public
  # From Text
  def initialize(text)
    name_regex = /(?<=compares)(.*?)(?=from the)/               # Returns test taker's name.
    measurement_regex = /(?<=.\ Score\n\n)(.*?)(?=Your )/m      # Returns all test's titles and scores.
    domain_regex = /([A-Z]+)\.+([0-9]+)\n/                      # Returns the main test (domain) of each exam set.
    subdomain_regex = /([A-Z][a-z]+)\.+([0-9]+)\n/              # Returns the remainder tests (subdomains) of each exam set.

    @name = text.scan(name_regex)
    @name[0].join
    @results = []
    measurements = text.scan(measurement_regex).to_a

    measurements.each do |measurement|                         # Evaluating each test.
      measure = measurement[0].to_s
      domain = measure.match(domain_regex)
      subdomains = measure.scan(subdomain_regex)
      @results << [domain[1],domain[2],subdomains]
    end

    hash_it
  end

  private
  # To Hash
  def hash_it
  end

end


class BigFiveResultsPoster
# Submits a Big 5 test results to the [Redacted] website
  attr_reader :token, :response_code

  public
  def initialize(results_hash, email)
  end

  private
  def post
  end

end

text_read = File.read("full_results.txt")
flow_start = BigFiveResultsTextSerializer.new(text_read)
last_phase = BigFiveResultsPoster.new(flow_start, "user@example.com")
