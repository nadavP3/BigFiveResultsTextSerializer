require 'net/http'
require 'net/https'
require 'uri'
require 'json'

class BigFiveResultsTextSerializer
# Converts the textual results of a test into a hash.
# Test results are generated by [Redacted]
  attr_reader :hash_results

  public
  # From Text (captures relevant data and mold it into required stracture)
  def initialize(text)
    text.gsub!(/\r\n?/, "\n")                                   # This line is not required on Microsoft Windows 10 machines:
                                                                # For whatever reason the "File.read" method works differently on Windows and doesn't add "\r".
                                                                # Presence of "\r" in the return value, on MacOS*, causes the regex to fail matching,
                                                                # This means that our code to only capture test subject's name (no test results or even titles).
                                                                # * Tested on MacOS High Sierra 10.13.3
                                                                #
    name_regex = /(?<=compares)(.*?)(?=from the)/               # Returns test taker's name.
    measurement_regex = /(?<=.\ Score\n\n)(.*?)(?=Your )/m      # Returns all test's titles and scores.
    subdomain_regex = /(^[A-Z][a-zA-Z\s\-]+)\.+([0-9]+)\n/      # Returns the all exam sets.

    @name = text.scan(name_regex)
    @name[0].join
    @initialization_results = []
    measurements = text.scan(measurement_regex).to_a           # Results blocks [txt....digits]

    measurements.each do |measurement|                         # Evaluating each exam.
      measure = measurement[0].to_s
      subdomains = measure.scan(subdomain_regex)               # Paticular exam set's content.
      domain = subdomains.shift                                # Exam's title and score.
      @initialization_results << [domain[1],domain[2],subdomains]
    end

    hash_it
  end

  private
  # To Hash (converts structured data set into a hash according to the specifications)
  def hash_it
    @hash_results = Hash.new
    @hash_results["NAME"] = @name[0][0]

    @initialization_results.each do |result|
      facets = Hash[result.last.map{|key, val| [key,val]}]
      @hash_results[result[0]] = {"Overall Score" => result[1], "Facets" => facets}
    end
  end

end # Ends class (BigFiveResultsTextSerializer)


class BigFiveResultsPoster
# Submits a Big 5 test results to the [Redacted] website
  attr_reader :token, :response_code

  public
  def initialize(results_hash, email)
    @data = results_hash.hash_results     # Not the best name, yet neccery;
                                          # results_hash (as required by specifications), is an object of the BigFiveResultsTextSerializer class.
                                          # hash_results is an object of the hash class, it also contains the data that we need in the format that we need it.
    @data["EMAIL"] = email
    post
  end

  private
  def post
    # Posts results to the website
    uri = URI.parse("www.google.com") # to be replaced with actual site address once security clearance is granted

    header = {'Content-Type' => 'text/json'}

    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    request = Net::HTTP::Post.new(uri.request_uri, header)
    request.body = @data.to_json

    p response = http.request(request)
    p @response_code = response.code
    p @token = response.body

    if @response_code === "201" # if the post operation succeeded
       true
    else
      false
    end
  end

end # Ends class (BigFiveResultsPoster)

text_read = File.read("full_results.txt")
flow_start = BigFiveResultsTextSerializer.new(text_read)
last_phase = BigFiveResultsPoster.new(flow_start, "user@example.com")
